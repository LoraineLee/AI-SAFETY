import { JSONValue } from '../../json-value/json-value';

/**
A prompt is a list of messages.

Note: Not all models and prompt formats support multi-modal inputs and
tool calls. The validation happens at runtime.

Note: This is not a user-facing prompt. The AI SDK methods will map the
user-facing prompt types such as chat or instruction prompts to this format.
 */
export type LanguageModelV2Prompt = Array<LanguageModelV2Message>;

export type LanguageModelV2Message =
  | {
      role: 'system';
      content: string;
    }
  | {
      role: 'user';
      content: Array<
        | LanguageModelV2TextPart
        | LanguageModelV2DataPart
        | LanguageModelV2ToolResultPart
      >;

      /**
       * Additional provider-specific metadata. They are passed through
       * to the provider from the AI SDK and enable provider-specific
       * functionality that needs to be applied per message,
       * e.g. the OpenAI name parameter.
       */
      providerMetadata: Record<string, JSONValue> | undefined;
    }
  | {
      role: 'assistant';
      content: Array<
        | LanguageModelV2TextPart
        | LanguageModelV2DataPart
        | LanguageModelV2ToolCallPart
      >;
    };

/**
Text content part of a prompt. It contains a string of text.
 */
export interface LanguageModelV2TextPart {
  type: 'text';

  /**
The text content.
   */
  text: string;

  /**
   * Additional provider-specific metadata. They are passed through
   * to the provider from the AI SDK and enable provider-specific
   * functionality that needs to be applied per message,
   * e.g. the Anthropic cache_control parameter.
   */
  providerMetadata?: Record<string, JSONValue> | undefined;
}

/**
Data prompt part. It contains raw data, e.g. for images, audio, PDFs, etc.
 */
export interface LanguageModelV2DataPart {
  type: 'data';

  /**
Data as a Uint8Array (e.g. from a Blob or Buffer) or URL
   */
  data: Uint8Array | URL;

  /**
Hint for the actual content. This enables the provider to create the right prompt.
 */
  kind: 'image' | 'audio' | 'video' | 'pdf' | undefined;

  /**
Mime type of the data.
   */
  mimeType: string | undefined;

  /**
   * Additional provider-specific metadata. They are passed through
   * to the provider from the AI SDK and enable provider-specific
   * functionality that needs to be applied per message,
   * e.g. the Anthropic cache_control parameter.
   */
  providerMetadata?: Record<string, JSONValue> | undefined;
}

/**
Tool call content part of a prompt. It contains a tool call (usually generated by the AI model).
 */
export interface LanguageModelV2ToolCallPart {
  type: 'tool-call';

  /**
ID of the tool call. This ID is used to match the tool call with the tool result.
 */
  toolCallId: string;

  /**
Name of the tool that is being called.
 */
  toolName: string;

  /**
Arguments of the tool call. This is a JSON-serializable object that matches the tool's input schema.
   */
  args: JSONValue;
}

/**
Tool result content part of a prompt. It contains the result of the tool call with the matching ID.
 */
export interface LanguageModelV2ToolResultPart {
  type: 'tool-result';

  /**
ID of the tool call that this result is associated with.
 */
  toolCallId: string;

  /**
Name of the tool that generated this result.
  */
  toolName: string;

  /**
Result of the tool call. This is a JSON-serializable object.
   */
  result: JSONValue;

  /**
Optional flag if the result is an error or an error message.
   */
  isError: boolean | undefined;

  /**
   * Additional provider-specific metadata. They are passed through
   * to the provider from the AI SDK and enable provider-specific
   * functionality that needs to be applied per message,
   * e.g. the Anthropic cache_control parameter.
   */
  providerMetadata?: Record<string, JSONValue> | undefined;
}
